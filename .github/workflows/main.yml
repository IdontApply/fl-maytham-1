# This is a basic workflow to help you get started with Actions

name: CI_tf1

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'tf1/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'tf1/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - run: go test -v -timeout 15m -run TestTf1
        working-directory: test
---
# This is a basic workflow to help you get started with Actions

name: CI_tf2

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'tf2/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'tf2/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      SSH_KEY: ${{secrets.SSH_KEY}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - run: 'echo "$SSH_KEY" > ../id_rsa'
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}
      - run: 'echo "$SSH_KEY_PUB" > ../id_rsa.pub'
        shell: bash
        env:
          SSH_KEY_PUB: ${{secrets.SSH_KEY_PUB}}
      - run: go test -v -timeout 15m -run TestTf2
